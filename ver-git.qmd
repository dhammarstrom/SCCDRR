# Introduction to git and GitHub
Git is a version control system that you install on your local machine. It helps you create a record of changes that you make to files in a specific repository where git is initialized. The git software stores earlier versions of your repository content in a hidden directory called `.git`.

Git works great for working with plain text files, such as `.txt`, `.md`, `.qmd`, `.csv`. With such files git can provide you with an overview of changes or diffs that has occurred between two versions of the file. Other file types such as `.docx` or `.xlsx` are also tracked by git but changes are not human readable in the git system.

Git can be set up to communicate with an online repository. There are several alternatives for online hosting of version controlled repositories but GitHub seems to be a popular alternative in the (data) science community. GitHub offers online hosting and tools for collaboration.

To enable version control and collaboration you must therefore have git installed and an active GitHub account.

### Accounts and git-to-GitHub integration
Git can be installed from [https://git-scm.com](https://git-scm.com). Git requires no additional account information or software. To allow for RStudio to act as a git client, you need to tell RStudio where your installation of git is located. This is done under *Tools > Global options > Git/SVN*. 

Your local version history maintained by git can be controlled from your terminal window. However, to connect to the online services of github you will need to set git up with your github account.

Github has recently made changes to its authentication protocol, [and seems to be in the process of making additional changes](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/about-authentication-to-github). [GitHub CLI](https://cli.github.com/)  provides a command line interface to GitHub that makes it easy to authenticate. Install [GitHub CLI here](https://cli.github.com/) and run `gh auth login` in your terminal to set things up.

### Local git edits
As already mentioned, git stores a record of changes to files in a given repository. A repository is a directory in which you have initialized git. We can do this in any directory using the command line by typing 

```console
git init
```

in our terminal. If you initialize a git (version control) project using RStudio it will run this command for you. You may check that you have initialized the version control system by typing 

```console
git status
```

You make decisions on what files to add to your version history and when to do so. A file, let us say `file-a.txt` is added to the staging area with the command  

```console
git add file-a.txt
```

The staging area is where files are kept until you commit a snapshot of them into the version history. We could also stage all files that have changes made to them by typing

```console
git add -A
```

The next step is to commit changes. A commit is a snapshot of the repository or files at a given moment. We perform a commit when after staging files type

```console
git commit -m "my commit message"
```

The `-m "my commit message"` adds a commit short commit message to the commit. This should be a description of the changes made to the repository. A longer commit message can be added by only initializing a commit using `git commit`. This command will bring up a dialog in your terminal making it possible to write a short message in the first line. After leaving one blank line a longer commit message can be added.

When a file has been commited to the version history it is marked as *unmodified* until you make changes to the file. Modified files can again be staged (e.g. `git add <file>`) and committed.

Files that were are tracked by mistake can be un-tracked without being removed using 

```console
git rm --cached <file>
```
This leaves the file in your local folder but removes it from the repository. Using `git rm <file>` removes the file from disc.

A local git "edit cycle" is shown in @fig-local-git-edits.  

```{r}
#| eval: true
#| message: false
#| warning: false
#| code-fold: true
#| label: fig-local-git-edits
#| fig-cap: "A cycle of local git edits. A files is added to the staging area by `git add <file>` and comitted to the *local repository* by `git commit`. The file is edited and is marked as modified after which it is staged (`git add <file>`). Again, staged modifications are commited and the file is once again marked as unmodified until edited. Files may be untracked from the repository or deleted from disc using `git rm` with or without the `--cached` option."

library(ggplot2); library(ggtext)

ggplot(data.frame(x = c(0,1), y = c(0,1)), aes(x, y)) + 
  
  scale_y_continuous(limits = c(0.3, 1)) +
  
  # Workspace
  geom_rect(aes(xmin = 0.01, 
            xmax = 0.6, 
            ymin = 0.35, 
            ymax = 1), 
            fill = "steelblue", 
            alpha = 0.2) +
  
  geom_rect(aes(xmin = 0.02, 
            xmax = 0.3, 
            ymin = 0.35, 
            ymax = 0.92), 
            fill = "steelblue", 
            alpha = 0.2) +
  
  geom_rect(aes(xmin = 0.31, 
            xmax = 0.58, 
            ymin = 0.35, 
            ymax = 0.92), 
            fill = "steelblue", 
            alpha = 0.2) +
 
    annotate("richtext", 
           x = c(0.02, 0.32),  
           hjust = 0,
           y = 0.89, 
           label = c("*Untracked*", "*Tracked*"),
           fill = NA, label.color = NA) + 
   
  
  annotate("richtext", 
           x = 0.02, 
           y = 0.97, 
           label = "**Workspace**",
           hjust = 0,
           size = 8, 
           fill = NA, label.color = NA, # remove background and outline
          label.padding = grid::unit(rep(0, 4), "pt")) + # remove padding) +
  
  # Stage area
  geom_rect(aes(xmin = 0.61, 
            xmax = 1, 
            ymin = 0.35, 
            ymax = 1), 
            fill = "purple", 
            alpha = 0.2) +
  

  
    annotate("richtext", 
           x = 0.62, 
           y = 0.97, 
           label = "**Staging area**",
           hjust = 0,
           size = 8, 
           fill = NA, label.color = NA, # remove background and outline
          label.padding = grid::unit(rep(0, 4), "pt")) + # remove padding) +
  
  
  
  ## Labels and arrows
  
    
  annotate("segment", y = c(0.85, 0.85), 
                   yend = c(0.85, 0.82),  
                   x = c(0.1, 0.9), 
                   xend = c(0.9, 0.9), 
                   arrow = arrow(length = unit(c(0, 2.5), "mm"), type = "closed")) +
  
  
    
  geom_label(aes(x = 0.62, y = 0.85 , label = "<file>"), 
             hjust = 0) +
  
  
  geom_label(aes(x = 0.02, y = 0.85 , label = "Add file `git add <file>`"), 
             hjust = 0) +
  
  
   annotate("segment", 
            y = c(0.8,0.75), 
            yend = c(0.75, 0.75), 
            x = c(0.9,0.9), 
            xend = c(0.9, 0.48), 
            arrow = arrow(length = unit(c(0, 2.5), "mm"), type = "closed")) +
  

  
       annotate("segment", 
            y = c(0.75, 0.7), 
            yend = c(0.7, 0.7), 
            x = c(0.35, 0.35), 
            xend = c(0.35, 0.4), 
            arrow = arrow(length = unit(c(0, 2.5), "mm"), type = "closed")) +
  
  
  
  geom_label(aes(x = 0.65, y = 0.8 , label = "Commit file `git commit -m 'msg'`"), 
             hjust = 0) +
  

    geom_label(aes(x = 0.31, y = 0.75 , label = "Edit unmodified     "), 
             hjust = 0) +
  

  
  
     annotate("segment", 
            y = c(0.7, 0.7), 
            yend = c(0.7, 0.67), 
            x = c(0.5, 0.9), 
            xend = c(0.9, 0.9), 
            arrow = arrow(length = unit(c(0, 2.5), "mm"), type = "closed")) +
  
  
      geom_label(aes(x = 0.8, y = 0.7 , label = "<file>"), 
             hjust = 0) +

  
  
  
      geom_label(aes(x = 0.40, y = 0.7 , label = "Stage modified `git add <file>`"), 
             hjust = 0) +
  
  

  
      annotate("segment", 
            y = c(0.65,0.65), 
            yend = c(0.65, 0.62), 
            x = c(0.8, 0.35), 
            xend = c(0.35, 0.35), 
            arrow = arrow(length = unit(c(0, 2.5), "mm"), type = "closed")) +
  
    geom_label(aes(x = 0.65, y = 0.65 , label = "Commit file `git commit -m 'msg'`"), 
             hjust = 0) +
  
  

  
  ## Possible routs from unmodified
  
  ## Modify and commit 
  ## Remove (untrack)
         annotate("segment", 
            y = c(0.6, 0.6), 
            yend = c(0.6, 0.54), 
            x = c(0.4, 0.4), 
            xend = c(0.70, 0.4),
            lty = 2,
            arrow = arrow(length = unit(c(2.5, 2.5), "mm"), type = "closed")) +
  ## File in staging area
         geom_label(aes(x = 0.75, y = 0.6 , label = "<file>"), 
             hjust = 0.5) +
  
  
  
  ## Untrack file
       annotate("segment", 
            y = c(0.5), 
            yend = c(0.5), 
            x = c(0.4), 
            xend = c(0.1), 
            lty = 2,
            arrow = arrow(length = unit(c(2.5), "mm"), type = "closed")) +
  
      geom_label(aes(x = 0.31, y = 0.60 , label = "Unmodified    "), 
             hjust = 0) +
  



  
    ## Remove file (delete)
       annotate("segment", 
            y = c(0.5), 
            yend = c(0.33), 
            x = c(0.4), 
            xend = c(0.4), 
            lty = 2,
            arrow = arrow(length = unit(c(2.5), "mm"), type = "closed")) +
    
      annotate("label", 
             x = 0.31, y = 0.5 , 
             label = "Untrack file\n`git rm --cached <file>`",

             hjust = 0) +
  
  ## File in trash
        geom_label(aes(x = 0.4, y = 0.30 , label = "<file>"), 
             hjust = 0.5) +
  
  
  ## File untracked
     geom_label(aes(x = 0.06, y = 0.5 , label = "<file>"), 
             hjust = 0.5) +
  
  
    geom_label(aes(x = 0.31, y = 0.40 , label = "Delete file from disc\n`git rm <file>`", 
             hjust = 0)) +
  
  
  
  theme_void()
  
  
  
  
  











```

### Local and online git usage
Your local git folder can be hocked up to a online repository. The online repository, or remote, is the repository in which you collaborate with others. The online repository can be set up as a starting point for your project or created from the command line in an already initialized git repository using GitHub CLI.

#### Starting with GitHub
After logging on to GitHub, select *New*, or go to [github.com/new](https://github.com/new). This will bring you to a schema that will create your repository. You need to give it a name, describe it, decide if you want to initialize with a readme file (you want to do that) and choose a license. Once all this is done you will be able to copy the HTTPS address that you find under *Code* in your repository in GitHub. The HTTPS address is then entered in the *New Project Dialog* in RStudio after selecting *Version Control* under the different project types. 

You have now initialized a remote repository and then cloned it to your computer as a local copy. You may now make changes to the project and add/commit these to you local version history.

#### Starting with a RStudio project
When starting up a new RStudio project without version control you have the opportunity to initialize git in the dialog box. If you decide not to do this, the next step should be to write `git init` in your terminal to initialize in your current project folder.

We can now create a remote repository using GitHub CLI with the command `gh repo create`. If this command is used without any subcommand you will be guided through the process on the command line. If you have your project running and wants to use it to create a repository on GitHub you should select *"Push an existing local directory to GitHub"*. You will be asked:

- The path to your local repository (defaults to `.`, the current directory)
- The name of the repository (defaults to your local folder name)
- If the repository should be private or public.
- A description of the repository (A short description of what the repository do/contain)
- If a remote should be added (Yes)
- What the remote should be called (Default to origin)

If successful, you will get a message telling you that the remote has been added. Your GitHub profile will now have a repository acting as the remote for your local repository.

#### Local to remote workflows
The online remote repository may have several purposes in the context of writing a scientific paper. It will act as the repository that you and any collaborators work together on. It can be used for showcasing code and computations and thereby supporting your paper. It can also act as a backup and reference for yourself.

The basic workflow (@fig-local-to-remote) for updating and downloading from the remote repository can include `git push` to push all local commits to the remote. This will update the remote with any changes you have committed to the version history. When the remote has been changed you will be able to download these in two ways. `git pull` downloads all changes and directly overwrite your local files, updating them to their latest versions. This also include removal of files and addition of new files. If you want to have more control you can `git fetch` changes which updates the local repository, but not your working directory. Using `git merge` you can merge downloaded versions with your working directory. `git fetch` and `git merge` can be a way to continue working on files but updating your repository with the latest changes. 



```{r}
#| eval: true
#| message: false
#| warning: false
#| code-fold: true
#| label: fig-local-to-remote
#| fig-cap: "Local git commits can be pushed to a remote repository, this updates the remote with your local changes. If changes are made to the remote these can be pulled to the local reposotory and working directory. Git pull overwrites your local files in the working directory at the same time as updating the local version history. Git fetch downloads changes to your local repository without merging files. Git merge attempts to merge files in the working directory with the most recent changes from the remote repository."

ggplot(data.frame(x = c(0,1), y = c(0,1)), aes(x, y)) + 
  
  scale_y_continuous(limits = c(0.3, 1)) +
  
  # Local working directory / Repository
  geom_rect(aes(xmin = 0.01, 
            xmax = 0.6, 
            ymin = 0.35, 
            ymax = 1), 
            fill = "steelblue", 
            alpha = 0.2) +
  
    geom_rect(aes(xmin = 0.02, 
            xmax = 0.3, 
            ymin = 0.35, 
            ymax = 0.92), 
            fill = "steelblue", 
            alpha = 0.2) +
   
  geom_rect(aes(xmin = 0.31, 
            xmax = 0.58, 
            ymin = 0.35, 
            ymax = 0.92), 
            fill = "steelblue", 
            alpha = 0.2) +
  
  # Remote repository
  geom_rect(aes(xmin = 0.7, 
            xmax = 0.95, 
            ymin = 0.35, 
            ymax = 1), 
            fill = "steelblue", 
            alpha = 0.2) +
 
 
    annotate("richtext", 
           x = c(0.02, 0.32),  
           hjust = 0,
           y = 0.89, 
           label = c("*Working directory*", "*Local repository*"),
           fill = NA, label.color = NA) + 
   
  
  annotate("richtext", 
           x = c(0.02, 0.7), 
           y = c(0.97, 0.97), 
           label = c("**Workspace**","**Remote**"),
           hjust = 0,
           size = 8, 
           fill = NA, label.color = NA) + # remove padding) 

  
      # Git add, commit
  # git push
  # git pull
  # git fetch / merge
       annotate("segment", 
            y = c(0.8, 0.7, 0.6, 0.5, 0.5), 
            yend = c(0.8, 0.7, 0.6, 0.5, 0.5), 
            x = c(0.1, 0.4, 0.8, 0.8, 0.4), 
            xend = c(0.5, 0.8, 0.12, 0.5, 0.12), 
            arrow = arrow(length = unit(c(2.5), "mm"), type = "closed")) +
    
      annotate("label", 
             x = c(0.1, 0.4, 0.8, 0.8, 0.35), 
             y = c(0.8 ,0.7, 0.6, 0.5, 0.5), 
             label = c("git add <file>\n git commit -m 'msg'",
                       "git push", 
                       "git pull", 
                       "git fetch", 
                       "git merge"),

             hjust = 0) +
  
  theme_void()




```




### Branches and pull requests
Sometimes changes to a repository can be expected to get big. Multiple files needs updating affecting multiple aspects of the repository. Instead of doing these as incremental steps in the main repository we could create a new branch. A branch starts at a specific state of the repository and adds new history without affecting the main branch. When changes have been made to the branch they can be incorporated into the main branch using merge or as a pull request.

### Forks and pull requests
Forks are copies of an online repository from one user to another user where the receiving user gets the privileges to make changes in the repository. 

### Issues
Issues are an feature of GitHub which allows for creating notes on potential improvements, bugs etc. They can be accessed and edited using GitHub CLI using `gh issue` or in the GitHub web interface.

### GitHub pages
GitHub pages is a service that allow for web hosting from your github repository. 
